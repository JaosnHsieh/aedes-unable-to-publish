diff --git a/node_modules/mqemitter/mqemitter.js b/node_modules/mqemitter/mqemitter.js
index 4521a30..af9e283 100644
--- a/node_modules/mqemitter/mqemitter.js
+++ b/node_modules/mqemitter/mqemitter.js
@@ -1,5 +1,7 @@
 'use strict'
-
+let releaseCount = 0;
+let callCount = 0;
+let unmatchedCallCount = 0;
 const { Qlobber } = require('qlobber')
 const assert = require('assert')
 const fastparallel = require('fastparallel')
@@ -19,6 +21,9 @@ function MQEmitter (opts) {
 
   this._messageQueue = []
   this._messageCallbacks = []
+  setInterval(()=>{
+    console.log(`$ ./node_modules/mqemitter/mqemitter.js this._messageCallbacks.length`,this._messageCallbacks.length)
+  },1000);
   this._parallel = fastparallel({
     results: false,
     released
@@ -27,6 +32,17 @@ function MQEmitter (opts) {
   this.concurrency = opts.concurrency || 0
 
   this.current = 0
+  console.log(`$ {
+    match_empty_levels: opts.matchEmptyLevels,
+    separator: opts.separator,
+    wildcard_one: opts.wildcardOne,
+    wildcard_some: opts.wildcardSome
+  }`,{
+    match_empty_levels: opts.matchEmptyLevels,
+    separator: opts.separator,
+    wildcard_one: opts.wildcardOne,
+    wildcard_some: opts.wildcardSome
+  })
   this._matcher = new Qlobber({
     match_empty_levels: opts.matchEmptyLevels,
     separator: opts.separator,
@@ -38,6 +54,7 @@ function MQEmitter (opts) {
   this._released = released
 
   function released () {
+    console.log(`$ releaseCount`,++releaseCount);
     that.current--
 
     const message = that._messageQueue.shift()
@@ -59,6 +76,7 @@ Object.defineProperty(MQEmitter.prototype, 'length', {
 MQEmitter.prototype.on = function on (topic, notify, done) {
   assert(topic)
   assert(notify)
+  console.log(`$ on topic,notify`,topic,notify)
   this._matcher.add(topic, notify)
 
   if (done) {
@@ -71,6 +89,7 @@ MQEmitter.prototype.on = function on (topic, notify, done) {
 MQEmitter.prototype.removeListener = function removeListener (topic, notify, done) {
   assert(topic)
   assert(notify)
+  console.log(`$ removeListener topic, notify`, topic,notify)
   this._matcher.remove(topic, notify)
 
   if (done) {
@@ -82,7 +101,14 @@ MQEmitter.prototype.removeListener = function removeListener (topic, notify, don
 
 MQEmitter.prototype.emit = function emit (message, cb) {
   assert(message)
+  console.log(`$ message.topic`,message.topic);
+  const isNewClients = /new\/clients/.test(message.topic);
+  const isSys = message.topic.startsWith('$SYS/');
 
+  if(isNewClients &&isSys ){
+    console.log(`$ isNewClients &&isSys `)
+    return;
+  }
   cb = cb || noop
 
   if (this.closed) {
@@ -108,6 +134,16 @@ MQEmitter.prototype.close = function close (cb) {
 
 MQEmitter.prototype._do = function (message, callback) {
   const matches = this._matcher.match(message.topic)
+  if(matches.length>0){
+    ++callCount
+  }else{
+    ++unmatchedCallCount;
+  }
+  console.log(`$ callCount+unmatchedCallCount`,callCount+unmatchedCallCount)
+  console.log(`$ message.topic`,message.topic)
+  console.log(`$ callCount`,callCount);
+  console.log(`$ unmatchedCallCount`, unmatchedCallCount);
+ 
 
   this.current++
   this._parallel(this, matches, message, callback)
